// Package declaration organizes this class within the project's structure.
package com.example.studentApp.model;

// Import statement for ignoring specific fields during JSON serialization.
import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

// Import statements for JPA annotations used for entity mapping.
import jakarta.persistence.*;

// The @JsonIgnoreProperties annotation ensures that fields related to Hibernate's lazy-loading mechanisms
// (like hibernateLazyInitializer and handler) are excluded from JSON responses.
// This prevents unnecessary or problematic data from being serialized into JSON.
@JsonIgnoreProperties({"hibernateLazyInitializer", "handler"})

// Marks this class as a JPA entity, indicating it is mapped to a database table.
@Entity
public class Course {

    // Specifies the primary key of the entity.
    @Id
    // Indicates that the ID is auto-generated by the database using the identity strategy.
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    // Represents the name of the course (e.g., "Math 101").
    private String name;

    // Defines a many-to-one relationship between the Course and the Student entity.
    // A course is associated with one student, and a student can have many courses.
    // FetchType.EAGER ensures the associated student is loaded immediately when the course is retrieved.
    @ManyToOne(fetch = FetchType.EAGER)
    // Maps the "student_id" column in the "Course" table to the "id" column in the "Student" table.
    @JoinColumn(name = "student_id", referencedColumnName = "id")
    private Student student;

    // Defines a many-to-one relationship between the Course and the Grade entity.
    // A course is associated with one grade, and the same grade can be shared across multiple courses.
    // FetchType.EAGER ensures the associated grade is loaded immediately when the course is retrieved.
    @ManyToOne(fetch = FetchType.EAGER)
    // Maps the "grade_id" column in the "Course" table to the "id" column in the "Grade" table.
    @JoinColumn(name = "grade_id", referencedColumnName = "id")
    private Grade grade;

    // --- Getters and Setters ---
    // These methods provide encapsulated access to the fields and allow modifications if needed.

    /**
     * Retrieves the ID of the course.
     * @return the unique identifier of the course.
     */
    public Long getId() {
        return id;
    }

    /**
     * Sets the ID of the course.
     * @param id the unique identifier to assign to the course.
     */
    public void setId(Long id) {
        this.id = id;
    }

    /**
     * Retrieves the name of the course.
     * @return the name of the course.
     */
    public String getName() {
        return name;
    }

    /**
     * Sets the name of the course.
     * @param name the name to assign to the course.
     */
    public void setName(String name) {
        this.name = name;
    }

    /**
     * Retrieves the student associated with the course.
     * @return the associated Student object.
     */
    public Student getStudent() {
        return student;
    }

    /**
     * Sets the student associated with the course.
     * @param student the Student object to associate with the course.
     */
    public void setStudent(Student student) {
        this.student = student;
    }

    /**
     * Retrieves the grade associated with the course.
     * @return the associated Grade object.
     */
    public Grade getGrade() {
        return grade;
    }

    /**
     * Sets the grade associated with the course.
     * @param grade the Grade object to associate with the course.
     */
    public void setGrade(Grade grade) {
        this.grade = grade;
    }
}
